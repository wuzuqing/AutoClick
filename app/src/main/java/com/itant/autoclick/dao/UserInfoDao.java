package com.itant.autoclick.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.itant.autoclick.model.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Pwd = new Property(2, String.class, "pwd", false, "PWD");
        public final static Property LastRefreshZhengWuTime = new Property(3, long.class, "lastRefreshZhengWuTime", false, "LAST_REFRESH_ZHENG_WU_TIME");
        public final static Property LastRefreshShouCaiTime = new Property(4, long.class, "lastRefreshShouCaiTime", false, "LAST_REFRESH_SHOU_CAI_TIME");
        public final static Property LastRefreshFengLuTime = new Property(5, long.class, "lastRefreshFengLuTime", false, "LAST_REFRESH_FENG_LU_TIME");
        public final static Property LastRefreshMoBaiTime = new Property(6, long.class, "lastRefreshMoBaiTime", false, "LAST_REFRESH_MO_BAI_TIME");
        public final static Property LastRefreshXunFangTime = new Property(7, long.class, "lastRefreshXunFangTime", false, "LAST_REFRESH_XUN_FANG_TIME");
        public final static Property LastRefreshSuijiTime = new Property(8, long.class, "lastRefreshSuijiTime", false, "LAST_REFRESH_SUIJI_TIME");
        public final static Property LastRefreshTaskTime = new Property(9, long.class, "lastRefreshTaskTime", false, "LAST_REFRESH_TASK_TIME");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"PWD\" TEXT," + // 2: pwd
                "\"LAST_REFRESH_ZHENG_WU_TIME\" INTEGER NOT NULL ," + // 3: lastRefreshZhengWuTime
                "\"LAST_REFRESH_SHOU_CAI_TIME\" INTEGER NOT NULL ," + // 4: lastRefreshShouCaiTime
                "\"LAST_REFRESH_FENG_LU_TIME\" INTEGER NOT NULL ," + // 5: lastRefreshFengLuTime
                "\"LAST_REFRESH_MO_BAI_TIME\" INTEGER NOT NULL ," + // 6: lastRefreshMoBaiTime
                "\"LAST_REFRESH_XUN_FANG_TIME\" INTEGER NOT NULL ," + // 7: lastRefreshXunFangTime
                "\"LAST_REFRESH_SUIJI_TIME\" INTEGER NOT NULL ," + // 8: lastRefreshSuijiTime
                "\"LAST_REFRESH_TASK_TIME\" INTEGER NOT NULL );"); // 9: lastRefreshTaskTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(3, pwd);
        }
        stmt.bindLong(4, entity.getLastRefreshZhengWuTime());
        stmt.bindLong(5, entity.getLastRefreshShouCaiTime());
        stmt.bindLong(6, entity.getLastRefreshFengLuTime());
        stmt.bindLong(7, entity.getLastRefreshMoBaiTime());
        stmt.bindLong(8, entity.getLastRefreshXunFangTime());
        stmt.bindLong(9, entity.getLastRefreshSuijiTime());
        stmt.bindLong(10, entity.getLastRefreshTaskTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(3, pwd);
        }
        stmt.bindLong(4, entity.getLastRefreshZhengWuTime());
        stmt.bindLong(5, entity.getLastRefreshShouCaiTime());
        stmt.bindLong(6, entity.getLastRefreshFengLuTime());
        stmt.bindLong(7, entity.getLastRefreshMoBaiTime());
        stmt.bindLong(8, entity.getLastRefreshXunFangTime());
        stmt.bindLong(9, entity.getLastRefreshSuijiTime());
        stmt.bindLong(10, entity.getLastRefreshTaskTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pwd
            cursor.getLong(offset + 3), // lastRefreshZhengWuTime
            cursor.getLong(offset + 4), // lastRefreshShouCaiTime
            cursor.getLong(offset + 5), // lastRefreshFengLuTime
            cursor.getLong(offset + 6), // lastRefreshMoBaiTime
            cursor.getLong(offset + 7), // lastRefreshXunFangTime
            cursor.getLong(offset + 8), // lastRefreshSuijiTime
            cursor.getLong(offset + 9) // lastRefreshTaskTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPwd(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLastRefreshZhengWuTime(cursor.getLong(offset + 3));
        entity.setLastRefreshShouCaiTime(cursor.getLong(offset + 4));
        entity.setLastRefreshFengLuTime(cursor.getLong(offset + 5));
        entity.setLastRefreshMoBaiTime(cursor.getLong(offset + 6));
        entity.setLastRefreshXunFangTime(cursor.getLong(offset + 7));
        entity.setLastRefreshSuijiTime(cursor.getLong(offset + 8));
        entity.setLastRefreshTaskTime(cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
